#!/usr/bin/env python
#
# toggl2sendtime - Sync Toggl time entries to OpenERP via Sendtime
#
# Maintained by: Lorenzo Villani <lvillani@develer.com>
#
# NOTE: Don't make changes to this file yourself unless it's a critical bug-
# fix, please.
#
# TODO:
#
# - Add dry-run mode.
#

from __future__ import print_function, unicode_literals

import argparse
import calendar
import datetime
import getpass

import keyring
import requests

import dateutil.parser

DATE_FORMAT = "%Y-%m-%d"

ENDPOINT_SENDTIME = "https://sendtime.develer.com/api/timesheet"
ENDPOINT_TOGGL_REPORT = "https://toggl.com/reports/api/v2/details"

KEYRING_SENDTIME_PASSWORD = "sendtime-password"
KEYRING_SENDTIME_USERNAME = "sendtime-username"
KEYRING_SERVICE = "toggl2sendtime"
KEYRING_TOGGL_API_TOKEN = "toggl-api-token"
KEYRING_TOGGL_CLIENT_ID = "toggl-client-id"
KEYRING_TOGGL_WORKSPACE_ID = "toggl-workspace-id"

MINUTE = 60  # Seconds


def main():
    args = parse_args()

    configure(force=args.configure)

    toggl_entries = get_toggl_entries(args.start_date, args.end_date)
    sendtime_entries = toggl_to_sendtime(toggl_entries)

    post_to_sendtime(sendtime_entries)


def parse_args():
    default_start, default_end = compute_start_and_end_dates()

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("-c", "--configure", action="store_true", help="Reconfigure?")
    parser.add_argument("-s", "--start", default=default_start, help="Start date")
    parser.add_argument("-e", "--end", default=default_end, help="End date")

    return parser.parse_args()


def compute_start_and_end_dates():
    now = datetime.datetime.now()
    monthrange = calendar.monthrange(now.year, previous_month(now))
    start = now.replace(month=previous_month(now), day=1)
    end = now.replace(month=previous_month(now), day=monthrange[1])

    return start.strftime(DATE_FORMAT), end.strftime(DATE_FORMAT)


def previous_month(now):
    return 12 if now.month == 1 else now.month - 1


def configure(force):
    def prompt_and_save(prompt, secret_name):
        secret = keyring.get_password(KEYRING_SERVICE, secret_name)
        if force or not secret:
            keyring.set_password(KEYRING_SERVICE, secret_name, getpass.getpass(prompt))

    prompt_and_save("Toggl API Key: ", KEYRING_TOGGL_API_TOKEN)
    prompt_and_save("Toggl Client ID: ", KEYRING_TOGGL_CLIENT_ID)
    prompt_and_save("Toggl Workspace ID: ", KEYRING_TOGGL_WORKSPACE_ID)
    prompt_and_save("Sendtime username: ", KEYRING_SENDTIME_USERNAME)
    prompt_and_save("Sendtime password: ", KEYRING_SENDTIME_PASSWORD)


def get_toggl_entries(start_date, end_date):
    args = {
        "auth": (get_password(KEYRING_TOGGL_API_TOKEN), "api_token"),
        "params": {
            "client_id": get_password(KEYRING_TOGGL_CLIENT_ID),
            "since": start_date,
            "until": end_date,
            "user_agent": "lorenzo@villani.me",
            "workspace_id": get_password(KEYRING_TOGGL_WORKSPACE_ID),
        },
    }

    return requests.get(ENDPOINT_TOGGL_REPORT, **args).json()


def toggl_to_sendtime(toggl_entries):
    def duration(start, end):
        return ((dateutil.parser.parse(end) - dateutil.parser.parse(start)).seconds) / MINUTE

    def date(start):
        return datetime.datetime.strftime(dateutil.parser.parse(start), "%Y-%m-%d")

    return [{
        "date": date(entry["start"]),
        "description": entry["description"],
        "duration": duration(entry["start"], entry["end"]),
        "project": entry["project"],
    } for entry in toggl_entries["data"]]


def post_to_sendtime(sendtime_entries):
    username = keyring.get_password(KEYRING_SERVICE, KEYRING_SENDTIME_USERNAME)
    password = keyring.get_password(KEYRING_SERVICE, KEYRING_SENDTIME_PASSWORD)

    for entry in sendtime_entries:
        response = requests.post(ENDPOINT_SENDTIME, auth=(username, password), json=entry)

        if response.code != 200:
            print("Failed to send:", entry)
            print("Response:", response.text)
            return


def get_password(secret_name):
    return keyring.get_password(KEYRING_SERVICE, secret_name)


if __name__ == "__main__":
    main()
